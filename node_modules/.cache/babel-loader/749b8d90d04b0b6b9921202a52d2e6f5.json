{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Todo-List\\\\src\\\\Components\\\\Main.js\";\nimport React, { useState } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { FormControl } from \"@material-ui/core\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from \"@material-ui/core/Divider\";\nimport Header from \"./Header/ToDoHeader\";\nimport TodoList from \"./List/TodoList\";\nimport * as todos from '../Models/todo';\nimport Category from \"../Models/Category\";\nimport useStyles from \"./MainCss\";\nimport MenuEnter from \"./MenuEnter\";\nimport MenuLeave from \"./MenuLeave\";\nimport AppDialogBox from \"./Dialogs/DialogBox\";\nimport ChangeStatus from \"./ChangeStatus\";\nimport Container from \"@material-ui/core/Container\";\n/**\n * Main component is the landing page\n *\n * @returns Header\n * @returns TodoList\n * @returns ChangeStatus\n * @returns AppDialogBox\n * {props.Title} Title of the dialog box\n *  {props.children} adds new category  and the color code text field\n * {props.AddButton}  add category button\n * {props.HandleClose} close button in the dialog box\n */\n\nexport default function Main(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [newTask, setNewTask] = useState('');\n  let todo;\n  console.log(props);\n\n  if (props.location.state.email === \"user1@rudolf.com\") {\n    todo = todos.todo_user1;\n  } else if (props.location.state.email === \"user2@rudolf.com\") {\n    todo = todos.todo_user2;\n  } else if (props.location.state.email === \"user3@rudolf.com\") {\n    todo = todos.todo_user3;\n  }\n\n  const [todoTasks, setTasks] = React.useState(todo);\n  const [Taskstatus, setTaskstatus] = React.useState(\"ALL\");\n  let taskLeft = \"\";\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  /**\n   * statusTasks is used to check the status of the task\n   *\n   * @Method statusTasks\n   */\n\n\n  const statusTasks = status => {\n    let viewTodoTasks = [];\n    if (status === \"ALL\") viewTodoTasks = todo;else if (status === \"ONGOING\") {\n      todo.map(Item => {\n        if (Item.completed === false) viewTodoTasks.push(Item);\n      });\n    } else if (status === \"COMPLETED\") {\n      todo.map(Item => {\n        if (Item.completed === true) viewTodoTasks.push(Item);\n      });\n    }\n    setTasks(viewTodoTasks);\n  };\n  /**\n   * UpdateStatus is used to update the status of the task from \"ongoing\" to \"complete\"\n   *\n   * @Method UpdateStatus\n   */\n\n\n  const UpdateStatus = ItemID => {\n    if (window.confirm(\"Are you sure to update task as complete\")) {\n      todo.map(Item => {\n        if (Item.id === ItemID) Item.completed = true;\n      });\n      if (Taskstatus === \"ALL\") setTaskstatus(\"COMPLETED\");else setTaskstatus(\"ALL\");\n    }\n  };\n  /**\n   * DeleteToDo is used to delete particular task\n   *\n   * @Method DeleteToDo\n   */\n\n\n  const DeleteToDo = ItemID => {\n    if (window.confirm(\"Are you sure want to delete a task\")) {\n      for (var i = 0; i < todo.length; i++) {\n        if (todo[i].id === ItemID) {\n          todo.splice(i, 1);\n        }\n      }\n\n      if (Taskstatus === \"ALL\") setTaskstatus(\"COMPLETED\");else setTaskstatus(\"ALL\");\n    }\n  };\n  /* Counts number of ongoing task left*/\n\n\n  let taskLeftCount = 0;\n  todo.map(Item => {\n    if (Item.completed === false) taskLeftCount++;\n  });\n  taskLeft = taskLeftCount + \" tasks left\";\n  /**\n   * addTask is used to add new task\n   *\n   * @Method addTask\n   */\n\n  const addTask = Item => {\n    var todoCount = todo.length + 1;\n    const metadata = {\n      id: todoCount,\n      name: newTask,\n      completed: false,\n      category: Item.category,\n      Color: Item.Color\n    };\n    todo.push(metadata);\n    setNewTask(\"\");\n    setOpen(false);\n  };\n\n  const buttonItems = Category.map(Item => /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    style: {\n      paddingBottom: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ButtonBackground,\n    style: {\n      backgroundColor: Item.Color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.CategoryMenu,\n    menuColor: Item.Color,\n    onMouseEnter: MenuEnter,\n    onMouseLeave: MenuLeave,\n    onClick: () => addTask(Item),\n    id: Item.Name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, Item.Name))))));\n  const AddTaskItem = /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.DivChkBox,\n    id: \"divChkBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: open,\n    onChange: () => setOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 1\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.DivAddTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"txtAddTask\",\n    style: {\n      marginLeft: '20px',\n      width: '80%'\n    },\n    label: \"Click checkbox to select category\",\n    onChange: e => setNewTask(e.target.value),\n    value: newTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  })));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"sm\",\n    style: {\n      paddingTop: \"5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, AddTaskItem, /*#__PURE__*/React.createElement(TodoList, {\n    Items: todoTasks,\n    onStatusChange: UpdateStatus,\n    onDelete: DeleteToDo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(ChangeStatus, {\n    TasksLeft: taskLeft,\n    StatusTasks: statusTasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(AppDialogBox, {\n    Title: \"Add New Task\",\n    Open: open,\n    Margin: classes.margin,\n    HandleClose: handleClose,\n    AddButton: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, buttonItems)))));\n}","map":{"version":3,"sources":["E:/React/Todo-List/src/Components/Main.js"],"names":["React","useState","CssBaseline","TextField","FormControl","Checkbox","Divider","Header","TodoList","todos","Category","useStyles","MenuEnter","MenuLeave","AppDialogBox","ChangeStatus","Container","Main","props","classes","open","setOpen","newTask","setNewTask","todo","console","log","location","state","email","todo_user1","todo_user2","todo_user3","todoTasks","setTasks","Taskstatus","setTaskstatus","taskLeft","handleClose","statusTasks","status","viewTodoTasks","map","Item","completed","push","UpdateStatus","ItemID","window","confirm","id","DeleteToDo","i","length","splice","taskLeftCount","addTask","todoCount","metadata","name","category","Color","buttonItems","paddingBottom","ButtonBackground","backgroundColor","CategoryMenu","Name","AddTaskItem","DivChkBox","DivAddTask","marginLeft","width","e","target","value","paddingTop","margin","form","formControl"],"mappings":"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","sourcesContent":["import React,{useState} from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { FormControl} from \"@material-ui/core\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from \"@material-ui/core/Divider\";\nimport Header from \"./Header/ToDoHeader\";\nimport TodoList from \"./List/TodoList\";\nimport * as todos from '../Models/todo';\nimport Category from \"../Models/Category\";\nimport useStyles from \"./MainCss\";\nimport MenuEnter from \"./MenuEnter\";\nimport MenuLeave from \"./MenuLeave\";\nimport AppDialogBox from \"./Dialogs/DialogBox\";\nimport ChangeStatus from \"./ChangeStatus\";\nimport Container from \"@material-ui/core/Container\";\n\n\n/**\n * Main component is the landing page\n *\n * @returns Header\n * @returns TodoList\n * @returns ChangeStatus\n * @returns AppDialogBox\n * {props.Title} Title of the dialog box\n *  {props.children} adds new category  and the color code text field\n * {props.AddButton}  add category button\n * {props.HandleClose} close button in the dialog box\n */\n\nexport default function Main(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [newTask, setNewTask] = useState('')\n\n  let todo;\n  console.log(props)\n  if (props.location.state.email === \"user1@rudolf.com\"){\n    todo = todos.todo_user1;\n  } else if (props.location.state.email === \"user2@rudolf.com\"){\n    todo = todos.todo_user2;\n  }\n  else if (props.location.state.email === \"user3@rudolf.com\"){\n    todo = todos.todo_user3;\n  }\n\n  const [todoTasks, setTasks] = React.useState(todo);\n  const [Taskstatus, setTaskstatus] = React.useState(\"ALL\");\n\n  let taskLeft = \"\";\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  /**\n   * statusTasks is used to check the status of the task\n   *\n   * @Method statusTasks\n   */\n\n  const statusTasks = (status) => {\n    let viewTodoTasks = [];\n    if (status === \"ALL\") viewTodoTasks = todo;\n    else if (status === \"ONGOING\") {\n      todo.map((Item) => {\n      if (Item.completed === false) viewTodoTasks.push(Item);\n      });\n    } else if (status === \"COMPLETED\") {\n      todo.map((Item) => {\n        if (Item.completed === true) viewTodoTasks.push(Item);\n      });\n    }\n    setTasks(viewTodoTasks);\n  };\n\n  /**\n   * UpdateStatus is used to update the status of the task from \"ongoing\" to \"complete\"\n   *\n   * @Method UpdateStatus\n   */\n\n  const UpdateStatus = (ItemID) => {\n    if (window.confirm(\"Are you sure to update task as complete\")) {\n      todo.map((Item) => {\n        if (Item.id === ItemID) Item.completed = true;\n      });\n\n      if (Taskstatus === \"ALL\") setTaskstatus(\"COMPLETED\");\n      else setTaskstatus(\"ALL\");\n    }\n  };\n\n  /**\n   * DeleteToDo is used to delete particular task\n   *\n   * @Method DeleteToDo\n   */\n  const DeleteToDo = (ItemID) => {\n    if (window.confirm(\"Are you sure want to delete a task\")) {\n      for (var i = 0; i < todo.length; i++) {\n        if (todo[i].id === ItemID) {\n          todo.splice(i, 1);\n        }\n      }\n      if (Taskstatus === \"ALL\") setTaskstatus(\"COMPLETED\");\n      else setTaskstatus(\"ALL\");\n    }\n  };\n\n  /* Counts number of ongoing task left*/\n  let taskLeftCount = 0;\n  todo.map((Item) => {\n    if (Item.completed === false) taskLeftCount++;\n  });\n  taskLeft = taskLeftCount + \" tasks left\";\n\n  /**\n   * addTask is used to add new task\n   *\n   * @Method addTask\n   */\n  const addTask = (Item) => {\n    var todoCount = todo.length + 1;\n    const metadata = {\n      id: todoCount,\n      name:newTask,\n      completed: false,\n      category: Item.category,\n      Color: Item.Color,\n    };\n\n    todo.push(metadata);\n    setNewTask(\"\")\n    setOpen(false);\n  };\n\n  const buttonItems = Category.map((Item) => (\n    <React.Fragment>\n      <tr style={{ paddingBottom: \"10px\" }}>\n        <td>\n          <div\n            className={classes.ButtonBackground}\n            style={{ backgroundColor: Item.Color }}\n          ></div>\n          <div\n            className={classes.CategoryMenu}\n            menuColor={Item.Color}\n            onMouseEnter={MenuEnter}\n            onMouseLeave={MenuLeave}\n            onClick={() => addTask(Item)}\n            id={Item.Name}\n          >\n            <span>{Item.Name}</span>\n          </div>\n        </td>\n      </tr>\n    </React.Fragment>\n  ));\n\n  const AddTaskItem = (\n    <React.Fragment>\n      <div className={classes.DivChkBox} id=\"divChkBox\">\n<Checkbox\n        checked={open}\n        onChange={() => setOpen(true)}\n      />\n      </div>\n      <div className={classes.DivAddTask}>\n        <TextField\n          id=\"txtAddTask\"\n          style={{ marginLeft:'20px',width:'80%'}}\n          label=\"Click checkbox to select category\"\n          onChange={e => setNewTask(e.target.value)}\n          value={newTask}\n        />\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Header /> \n      <Divider />\n      <Container maxWidth=\"sm\" style={{ paddingTop: \"5px\" }}>\n       {AddTaskItem} \n         <TodoList\n          Items={todoTasks}\n          onStatusChange={UpdateStatus}\n          onDelete={DeleteToDo}\n        /> \n        <ChangeStatus\n          TasksLeft={taskLeft}\n          StatusTasks={statusTasks}\n        ></ChangeStatus>\n      </Container>\n      <AppDialogBox\n        Title=\"Add New Task\"\n        Open={open}\n        Margin={classes.margin}\n        HandleClose={handleClose}\n        AddButton=\"\"\n      >\n        <form className={classes.form} noValidate>\n          <FormControl className={classes.formControl}>\n            <table>{buttonItems}</table>\n          </FormControl>\n        </form>\n      </AppDialogBox>\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
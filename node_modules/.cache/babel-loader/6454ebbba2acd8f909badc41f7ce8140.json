{"ast":null,"code":"import _slicedToArray from\"E:\\\\React\\\\Todo-List\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import CssBaseline from\"@material-ui/core/CssBaseline\";import TextField from\"@material-ui/core/TextField\";import{FormControl}from\"@material-ui/core\";import Checkbox from'@material-ui/core/Checkbox';import Divider from\"@material-ui/core/Divider\";import Header from\"./Header/ToDoHeader\";import TodoList from\"./List/TodoList\";import*as todos from'../Models/todo';import Category from\"../Models/Category\";import useStyles from\"./MainCss\";import MenuEnter from\"./MenuEnter\";import MenuLeave from\"./MenuLeave\";import AppDialogBox from\"./Dialogs/DialogBox\";import ChangeStatus from\"./ChangeStatus\";import Container from\"@material-ui/core/Container\";/**\n * Main component is the landing page\n *\n * @returns Header\n * @returns TodoList\n * @returns ChangeStatus\n * @returns AppDialogBox\n * {props.Title} Title of the dialog box\n *  {props.children} adds new category  and the color code text field\n * {props.AddButton}  add category button\n * {props.HandleClose} close button in the dialog box\n */export default function Main(props){var classes=useStyles();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),newTask=_useState4[0],setNewTask=_useState4[1];var todo;console.log(props);if(props.location.state.email===\"user1@rudolf.com\"){todo=todos.todo_user1;}else if(props.location.state.email===\"user2@rudolf.com\"){todo=todos.todo_user2;}else if(props.location.state.email===\"user3@rudolf.com\"){todo=todos.todo_user3;}var _React$useState=React.useState(todo),_React$useState2=_slicedToArray(_React$useState,2),todoTasks=_React$useState2[0],setTasks=_React$useState2[1];var _React$useState3=React.useState(\"ALL\"),_React$useState4=_slicedToArray(_React$useState3,2),Taskstatus=_React$useState4[0],setTaskstatus=_React$useState4[1];var taskLeft=\"\";var handleClose=function handleClose(){setOpen(false);};/**\n   * statusTasks is used to check the status of the task\n   *\n   * @Method statusTasks\n   */var statusTasks=function statusTasks(status){var viewTodoTasks=[];if(status===\"ALL\")viewTodoTasks=todo;else if(status===\"ONGOING\"){todo.map(function(Item){if(Item.completed===false)viewTodoTasks.push(Item);});}else if(status===\"COMPLETED\"){todo.map(function(Item){if(Item.completed===true)viewTodoTasks.push(Item);});}setTasks(viewTodoTasks);};/**\n   * UpdateStatus is used to update the status of the task from \"ongoing\" to \"complete\"\n   *\n   * @Method UpdateStatus\n   */var UpdateStatus=function UpdateStatus(ItemID){if(window.confirm(\"Are you sure to update task as complete\")){todo.map(function(Item){if(Item.id===ItemID)Item.completed=true;});if(Taskstatus===\"ALL\")setTaskstatus(\"COMPLETED\");else setTaskstatus(\"ALL\");}};/**\n   * DeleteToDo is used to delete particular task\n   *\n   * @Method DeleteToDo\n   */var DeleteToDo=function DeleteToDo(ItemID){if(window.confirm(\"Are you sure want to delete a task\")){for(var i=0;i<todo.length;i++){if(todo[i].id===ItemID){todo.splice(i,1);}}if(Taskstatus===\"ALL\")setTaskstatus(\"COMPLETED\");else setTaskstatus(\"ALL\");}};/* Counts number of ongoing task left*/var taskLeftCount=0;todo.map(function(Item){if(Item.completed===false)taskLeftCount++;});taskLeft=taskLeftCount+\" tasks left\";/**\n   * addTask is used to add new task\n   *\n   * @Method addTask\n   */var addTask=function addTask(Item){var todoCount=todo.length+1;var metadata={id:todoCount,name:newTask,completed:false,category:Item.category,Color:Item.Color};todo.push(metadata);setNewTask(\"\");setOpen(false);};var buttonItems=Category.map(function(Item){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"tr\",{style:{paddingBottom:\"10px\"}},/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.ButtonBackground,style:{backgroundColor:Item.Color}}),/*#__PURE__*/React.createElement(\"div\",{className:classes.CategoryMenu,menuColor:Item.Color,onMouseEnter:MenuEnter,onMouseLeave:MenuLeave,onClick:function onClick(){return addTask(Item);},id:Item.Name},/*#__PURE__*/React.createElement(\"span\",null,Item.Name)))));});var AddTaskItem=/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:classes.DivChkBox,id:\"divChkBox\"},/*#__PURE__*/React.createElement(Checkbox,{checked:open,onChange:function onChange(){return setOpen(true);}})),/*#__PURE__*/React.createElement(\"div\",{className:classes.DivAddTask},/*#__PURE__*/React.createElement(TextField,{id:\"txtAddTask\",style:{marginLeft:'20px',width:'80%'},label:\"Click checkbox to select category\",onChange:function onChange(e){return setNewTask(e.target.value);},value:newTask})));return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(CssBaseline,null),/*#__PURE__*/React.createElement(Header,null),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(Container,{maxWidth:\"sm\",style:{paddingTop:\"5px\"}},AddTaskItem,/*#__PURE__*/React.createElement(TodoList,{Items:todoTasks,onStatusChange:UpdateStatus,onDelete:DeleteToDo}),/*#__PURE__*/React.createElement(ChangeStatus,{TasksLeft:taskLeft,StatusTasks:statusTasks})),/*#__PURE__*/React.createElement(AppDialogBox,{Title:\"Add New Task\",Open:open,Margin:classes.margin,HandleClose:handleClose,AddButton:\"\"},/*#__PURE__*/React.createElement(\"form\",{className:classes.form,noValidate:true},/*#__PURE__*/React.createElement(FormControl,{className:classes.formControl},/*#__PURE__*/React.createElement(\"table\",null,buttonItems)))));}","map":{"version":3,"sources":["E:/React/Todo-List/src/Components/Main.js"],"names":["React","useState","CssBaseline","TextField","FormControl","Checkbox","Divider","Header","TodoList","todos","Category","useStyles","MenuEnter","MenuLeave","AppDialogBox","ChangeStatus","Container","Main","props","classes","open","setOpen","newTask","setNewTask","todo","console","log","location","state","email","todo_user1","todo_user2","todo_user3","todoTasks","setTasks","Taskstatus","setTaskstatus","taskLeft","handleClose","statusTasks","status","viewTodoTasks","map","Item","completed","push","UpdateStatus","ItemID","window","confirm","id","DeleteToDo","i","length","splice","taskLeftCount","addTask","todoCount","metadata","name","category","Color","buttonItems","paddingBottom","ButtonBackground","backgroundColor","CategoryMenu","Name","AddTaskItem","DivChkBox","DivAddTask","marginLeft","width","e","target","value","paddingTop","margin","form","formControl"],"mappings":"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","sourcesContent":["import React,{useState} from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { FormControl} from \"@material-ui/core\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from \"@material-ui/core/Divider\";\nimport Header from \"./Header/ToDoHeader\";\nimport TodoList from \"./List/TodoList\";\nimport * as todos from '../Models/todo';\nimport Category from \"../Models/Category\";\nimport useStyles from \"./MainCss\";\nimport MenuEnter from \"./MenuEnter\";\nimport MenuLeave from \"./MenuLeave\";\nimport AppDialogBox from \"./Dialogs/DialogBox\";\nimport ChangeStatus from \"./ChangeStatus\";\nimport Container from \"@material-ui/core/Container\";\n\n\n/**\n * Main component is the landing page\n *\n * @returns Header\n * @returns TodoList\n * @returns ChangeStatus\n * @returns AppDialogBox\n * {props.Title} Title of the dialog box\n *  {props.children} adds new category  and the color code text field\n * {props.AddButton}  add category button\n * {props.HandleClose} close button in the dialog box\n */\n\nexport default function Main(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [newTask, setNewTask] = useState('')\n\n  let todo;\n  console.log(props)\n  if (props.location.state.email === \"user1@rudolf.com\"){\n    todo = todos.todo_user1;\n  } else if (props.location.state.email === \"user2@rudolf.com\"){\n    todo = todos.todo_user2;\n  }\n  else if (props.location.state.email === \"user3@rudolf.com\"){\n    todo = todos.todo_user3;\n  }\n\n  const [todoTasks, setTasks] = React.useState(todo);\n  const [Taskstatus, setTaskstatus] = React.useState(\"ALL\");\n\n  let taskLeft = \"\";\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  /**\n   * statusTasks is used to check the status of the task\n   *\n   * @Method statusTasks\n   */\n\n  const statusTasks = (status) => {\n    let viewTodoTasks = [];\n    if (status === \"ALL\") viewTodoTasks = todo;\n    else if (status === \"ONGOING\") {\n      todo.map((Item) => {\n      if (Item.completed === false) viewTodoTasks.push(Item);\n      });\n    } else if (status === \"COMPLETED\") {\n      todo.map((Item) => {\n        if (Item.completed === true) viewTodoTasks.push(Item);\n      });\n    }\n    setTasks(viewTodoTasks);\n  };\n\n  /**\n   * UpdateStatus is used to update the status of the task from \"ongoing\" to \"complete\"\n   *\n   * @Method UpdateStatus\n   */\n\n  const UpdateStatus = (ItemID) => {\n    if (window.confirm(\"Are you sure to update task as complete\")) {\n      todo.map((Item) => {\n        if (Item.id === ItemID) Item.completed = true;\n      });\n\n      if (Taskstatus === \"ALL\") setTaskstatus(\"COMPLETED\");\n      else setTaskstatus(\"ALL\");\n    }\n  };\n\n  /**\n   * DeleteToDo is used to delete particular task\n   *\n   * @Method DeleteToDo\n   */\n  const DeleteToDo = (ItemID) => {\n    if (window.confirm(\"Are you sure want to delete a task\")) {\n      for (var i = 0; i < todo.length; i++) {\n        if (todo[i].id === ItemID) {\n          todo.splice(i, 1);\n        }\n      }\n      if (Taskstatus === \"ALL\") setTaskstatus(\"COMPLETED\");\n      else setTaskstatus(\"ALL\");\n    }\n  };\n\n  /* Counts number of ongoing task left*/\n  let taskLeftCount = 0;\n  todo.map((Item) => {\n    if (Item.completed === false) taskLeftCount++;\n  });\n  taskLeft = taskLeftCount + \" tasks left\";\n\n  /**\n   * addTask is used to add new task\n   *\n   * @Method addTask\n   */\n  const addTask = (Item) => {\n    var todoCount = todo.length + 1;\n    const metadata = {\n      id: todoCount,\n      name:newTask,\n      completed: false,\n      category: Item.category,\n      Color: Item.Color,\n    };\n\n    todo.push(metadata);\n    setNewTask(\"\")\n    setOpen(false);\n  };\n\n  const buttonItems = Category.map((Item) => (\n    <React.Fragment>\n      <tr style={{ paddingBottom: \"10px\" }}>\n        <td>\n          <div\n            className={classes.ButtonBackground}\n            style={{ backgroundColor: Item.Color }}\n          ></div>\n          <div\n            className={classes.CategoryMenu}\n            menuColor={Item.Color}\n            onMouseEnter={MenuEnter}\n            onMouseLeave={MenuLeave}\n            onClick={() => addTask(Item)}\n            id={Item.Name}\n          >\n            <span>{Item.Name}</span>\n          </div>\n        </td>\n      </tr>\n    </React.Fragment>\n  ));\n\n  const AddTaskItem = (\n    <React.Fragment>\n      <div className={classes.DivChkBox} id=\"divChkBox\">\n<Checkbox\n        checked={open}\n        onChange={() => setOpen(true)}\n      />\n      </div>\n      <div className={classes.DivAddTask}>\n        <TextField\n          id=\"txtAddTask\"\n          style={{ marginLeft:'20px',width:'80%'}}\n          label=\"Click checkbox to select category\"\n          onChange={e => setNewTask(e.target.value)}\n          value={newTask}\n        />\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Header /> \n      <Divider />\n      <Container maxWidth=\"sm\" style={{ paddingTop: \"5px\" }}>\n       {AddTaskItem} \n         <TodoList\n          Items={todoTasks}\n          onStatusChange={UpdateStatus}\n          onDelete={DeleteToDo}\n        /> \n        <ChangeStatus\n          TasksLeft={taskLeft}\n          StatusTasks={statusTasks}\n        ></ChangeStatus>\n      </Container>\n      <AppDialogBox\n        Title=\"Add New Task\"\n        Open={open}\n        Margin={classes.margin}\n        HandleClose={handleClose}\n        AddButton=\"\"\n      >\n        <form className={classes.form} noValidate>\n          <FormControl className={classes.formControl}>\n            <table>{buttonItems}</table>\n          </FormControl>\n        </form>\n      </AppDialogBox>\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}